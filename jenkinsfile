pipeline {
  agent any

  environment {
    // Tag images by commit for traceability (even if you keep them local)
    COMMIT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    // Optionally override ports or API URL via compose env if needed
  }

  options {
    // Keep console logs neat and stop parallel runs of the same branch
    timestamps()
    disableConcurrentBuilds()
  }

  triggers {
    // If you don't use a GitHub webhook, uncomment:
    // pollSCM('H/5 * * * *')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build & Start (docker compose)') {
      steps {
        sh '''
          docker compose version
          # Build and (re)create containers in the background
          docker compose up -d --build
          docker compose ps
        '''
      }
    }

    stage('Health Check') {
      steps {
        sh '''
          # Simple health probes; retry a bit while containers warm up
          for i in $(seq 1 20); do
            if curl -sf http://localhost:5000/api/health >/dev/null; then
              echo "API healthy"
              break
            fi
            echo "Waiting for API... ($i)"
            sleep 3
          done

          # Optional: Frontend check (it serves on 5173 in dev mode)
          curl -sf http://localhost:5173 >/dev/null || true
        '''
      }
    }
  }

  post {
    success {
      echo "Deployment succeeded on ${env.NODE_NAME} @ ${env.BUILD_TAG}"
    }
    failure {
      script {
        sh 'docker compose ps || true'
        sh 'docker compose logs --no-color || true'
      }
    }
    always {
      archiveArtifacts artifacts: '**/docker-compose.yml', onlyIfSuccessful: false
    }
  }
}
